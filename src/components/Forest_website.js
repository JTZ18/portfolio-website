/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState, forwardRef } from 'react'
import * as THREE from 'three'
import { useGLTF, PerspectiveCamera, useAnimations, useScroll, Html } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber'
import styled from 'styled-components'
import { motion } from 'framer-motion';

export default function Model({aboutStatus, setAboutStatus, ...props }) {
  const [vec] = useState(() => new THREE.Vector3())
  const group = useRef()
  const scroll = useScroll()
  const { nodes, materials, animations, cameras } = useGLTF('/forest_website.glb')
  console.log(cameras);
  const { actions } = useAnimations(animations, group)
  console.log(actions);


  useEffect(() => void (actions["Camera.001Action"].play().paused = true), [])
  useFrame((state, delta) => {
  const action = actions['Camera.001Action']
  // // The offset is between 0 and 1, you can apply it to your models any way you like, add 1 - scroll.offset to change direction
  const offset = scroll.offset
  action.time = THREE.MathUtils.damp(action.time, (action.getClip().duration) * offset, 100, delta)
  // console.log(action.time);
  //console.log(state.camera.position);
  // actions["Camera.001Action"].time = THREE.MathUtils.lerp(actions["Camera.001Action"].time, actions["Camera.001Action"].getClip().duration * scroll.current, 0.05)
  state.camera.position.lerp(vec.set(state.mouse.x * 0.5, state.mouse.y * 0.5, 0), 0.1)
  
 })
  return (
    <group ref={group} {...props} dispose={null}>
      <Html scale={1.5} rotation={[0, -Math.PI / 2 +0.5, 0]} position={[5.65, 3.6, 17.5]} transform occlude>
          <About 
          onClick={() => {
            console.log(aboutStatus)
            setAboutStatus(!aboutStatus)}}
          variants={containerVariants}
          animate={aboutStatus ? "hidden" : "visible"}>
            About
          </About>
      </Html>

      <Html scale={1.5} rotation={[0, -Math.PI / 2 +1.2, 0]} position={[7.85, 1.6, 7.5]} transform occlude>
          <About 
          onClick={() => {
            console.log(props.teslaStatus)
            props.setTeslaStatus(!props.teslaStatus)}}
          variants={containerVariants}
          animate={props.teslaStatus ? "hidden" : "visible"}>
            Tesla
          </About>
      </Html>

      <Html scale={1.5} rotation={[0, -Math.PI / 2 +0.5, 0]} position={[5.85, 4.23, 0.5]} transform occlude>
          <About 
          onClick={() => {
            console.log(props.disneyStatus)
            props.setDisneyStatus(!props.disneyStatus)}}
          variants={containerVariants}
          animate={props.disneyStatus ? "hidden" : "visible"}>
            Disney
          </About>
      </Html>

      <Html scale={1.5} rotation={[0, -Math.PI / 2 +2.4, 0]} position={[-3.2, 5.6, -19.5]} transform occlude>
          <About 
          onClick={() => {
            console.log(props.liv3lyStatus)
            props.setLiv3lyStatus(!props.liv3lyStatus)}}
          variants={containerVariants}
          animate={props.liv3lyStatus ? "hidden" : "visible"}>
            Liv3ly
          </About>
      </Html>

      <Html scale={1.5} rotation={[0, -Math.PI / 2 +0.5, 0]} position={[8.85, 5.8, -26.1]} transform occlude>
          <About 
          onClick={() => {
            console.log(props.geckoStatus)
            props.setGeckoStatus(!props.geckoStatus)}}
          variants={containerVariants}
          animate={props.geckoStatus ? "hidden" : "visible"}>
            Gecko
          </About>
      </Html>

      <group rotation={[-Math.PI / 2, 0, 0]}>
        <mesh castShadow receiveShadow geometry={nodes.Mesh_0.geometry} material={materials.map_1blinn6SG} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_1.geometry} material={materials.map_1lambert4SG} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_2.geometry} material={nodes.Mesh_2.material} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_3.geometry} material={nodes.Mesh_3.material} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_4.geometry} material={materials.map_1lambert5SG} />
      </group>
      <group position={[-16.71, -1, -2.91]} rotation={[-Math.PI / 2, 0, 0]}>
        <mesh castShadow receiveShadow geometry={nodes.Mesh_0001.geometry} material={materials['map_1blinn6SG.001']} />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_1001.geometry}
          material={materials['map_1lambert4SG.001']}
        />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_2001.geometry} material={nodes.Mesh_2001.material} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_3001.geometry} material={nodes.Mesh_3001.material} />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_4001.geometry}
          material={materials['map_1lambert5SG.001']}
        />
      </group>
      <group position={[16.47, -1.49, -0.6]} rotation={[-Math.PI / 2, 0, 0]}>
        <mesh castShadow receiveShadow geometry={nodes.Mesh_0002.geometry} material={materials['map_1blinn6SG.002']} />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_1002.geometry}
          material={materials['map_1lambert4SG.002']}
        />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_2002.geometry} material={nodes.Mesh_2002.material} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_3002.geometry} material={nodes.Mesh_3002.material} />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_4002.geometry}
          material={materials['map_1lambert5SG.002']}
        />
      </group>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={0.91}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <group scale={500}>
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Sphere_Material001_0.geometry}
              material={materials['Material.001']}
              scale={[0.11, 0.11, 0.11]}
            />
          </group>
        </group>
      </group>
      <group name="Camera001" position={[4.65, 7.46, 40.92]} rotation={[1.88, -0.19, -0.73]}>
        <PerspectiveCamera makeDefault={true} far={1000} near={0.001} fov={60} rotation={[-Math.PI / 2, 0, 0]} />
      </group>
    </group>
  )
}

useGLTF.preload('/forest_website.glb')

const About = styled(motion.div)`
  cursor: pointer;
  outline: none;
  border: none;
  font-size: 8px;
  font-weight: 300;
  background: black;
  color: #f0f0f0;
  padding: 2px 10px;
  border-radius: 20px;
  letter-spacing: 1px;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 10px;
  z-index: 1;
`

const containerVariants = {
  hidden: { 
    scale: 0,
    opacity: 0,
  },
  visible: {
    scale: 1,
    opacity: 1,
    transition: {
      duration: 1, type: 'spring', stiffness: 120
    }
  }
}

const Tesla = styled(About) `

`
