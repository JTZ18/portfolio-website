/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState } from 'react'
import * as THREE from 'three'
import { useGLTF, PerspectiveCamera, useAnimations, useScroll } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber'

export default function Model({ ...props }) {
  const [vec] = useState(() => new THREE.Vector3())
  const group = useRef()
  const scroll = useScroll()
  const { nodes, materials, animations, cameras } = useGLTF('/forest_website.glb')
  console.log(cameras);
  const { actions } = useAnimations(animations, group)
  console.log(actions);
  useEffect(() => void (actions["Camera.001Action"].play().paused = true), [])
  useFrame((state, delta) => {
  const action = actions['Camera.001Action']
  // The offset is between 0 and 1, you can apply it to your models any way you like, add 1 - scroll.offset to change direction
  const offset = scroll.offset
  action.time = THREE.MathUtils.damp(action.time, (action.getClip().duration) * offset, 100, delta)
  // console.log(action.time);
  //console.log(state.camera.position);
  state.camera.position.lerp(vec.set(state.mouse.x * 0.2, state.mouse.y * 0.2, 0), 0.05)
  
 })
  return (
    <group ref={group} {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <mesh castShadow receiveShadow geometry={nodes.Mesh_0.geometry} material={materials.map_1blinn6SG} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_1.geometry} material={materials.map_1lambert4SG} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_2.geometry} material={nodes.Mesh_2.material} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_3.geometry} material={nodes.Mesh_3.material} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_4.geometry} material={materials.map_1lambert5SG} />
      </group>
      <group position={[-16.71, -1, -2.91]} rotation={[-Math.PI / 2, 0, 0]}>
        <mesh castShadow receiveShadow geometry={nodes.Mesh_0001.geometry} material={materials['map_1blinn6SG.001']} />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_1001.geometry}
          material={materials['map_1lambert4SG.001']}
        />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_2001.geometry} material={nodes.Mesh_2001.material} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_3001.geometry} material={nodes.Mesh_3001.material} />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_4001.geometry}
          material={materials['map_1lambert5SG.001']}
        />
      </group>
      <group position={[16.47, -1.49, -0.6]} rotation={[-Math.PI / 2, 0, 0]}>
        <mesh castShadow receiveShadow geometry={nodes.Mesh_0002.geometry} material={materials['map_1blinn6SG.002']} />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_1002.geometry}
          material={materials['map_1lambert4SG.002']}
        />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_2002.geometry} material={nodes.Mesh_2002.material} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_3002.geometry} material={nodes.Mesh_3002.material} />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_4002.geometry}
          material={materials['map_1lambert5SG.002']}
        />
      </group>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={0.91}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <group scale={500}>
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Sphere_Material001_0.geometry}
              material={materials['Material.001']}
              scale={[0.11, 0.11, 0.11]}
            />
          </group>
        </group>
      </group>
      <group name="Camera001" position={[4.65, 7.46, 40.92]} rotation={[1.88, -0.19, -0.73]}>
        <PerspectiveCamera makeDefault={true} far={1000} near={0.1} fov={22.9} rotation={[-Math.PI / 2, 0, 0]} />
      </group>
    </group>
  )
}

useGLTF.preload('/forest_website.glb')
